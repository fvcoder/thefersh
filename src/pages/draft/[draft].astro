---
import { ActionError } from "astro:actions";
import Layout from "../../feature/layout/page/Base.astro";
import { Client } from "@notionhq/client";
import { RenderNotion } from "../../feature/notion/component/renderNotion";
import { R } from "../../../dist/_astro/index.I3bF3y5c";

    const notion = new Client({
    auth: Astro.locals.runtime.env.NOTION_API_KEY,
    })

    const page: any = await notion.pages.retrieve({
        page_id: Astro.params.draft as string,
    }).catch(() => {
        Astro.response.status = 404;
        Astro.response.statusText = 'Not found';
    });

    if (!page) {
        return  new Response(null, { status: 404, statusText: 'Not Found' });;
    }

    const lastEditedTime = new Date(
        page.last_edited_time as string,
    ).toLocaleString('es-BO', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    });

    const block = await notion.blocks.children.list({
        block_id: page.id,
    });

    const body = await Promise.all(
        block.results.map(async (x: any) => {
        if (x.type === 'table' && x.has_children) {
            const tableBlock = await notion.blocks.children.list({
            block_id: x.id,
            });

            return {
            ...x,
            tableChildren: tableBlock.results,
            };
        }

        return x;
        }),
    );

    const name = page.properties['Nombre'];

    const properties = page.properties;

    delete properties['SubÃ­tem'];
    delete properties['Ãšltima ediciÃ³n'];
    delete properties['Fecha de Publicacion'];
    delete properties['Nombre'];
    delete properties['Blog'];
    delete properties['ðŸ“… Calendario'];

    const publicProperties = Object.keys(properties as Record<string, any>).map(
        (key) => ({
        name: key,
        value: properties[key],
        }),
    );
---
<Layout
    lang="es"
    title={name.title.map((y: any) => y.plain_text).join("")}
    description="(para esta parte no hay descripciÃ³n, entra y enterate mas)"
>
    <div class="max-w-3xl mx-auto px-6 py-10 md:py-20">
        <header class="prose max-w-3xl mx-auto prose-h1:text-4xl">
            <small>
                Actualizado el {lastEditedTime}
              </small>
            <h1 >{name.title.map((y: any) => y.plain_text).join("")}</h1>

            <div class="relative overflow-x-auto rounded-md not-prose">
                <table class="w-full text-sm text-left text-gray-500 border rounded-lg">
                    <tbody>
                        {publicProperties.map((x, i) => (
                            <tr class="bg-white">
                                <th scope="row" class="px-6 py-4 font-medium text-gray-900">
                                    {x.name}
                                </th>
                                <td class="px-6 py-4">
                                    <RenderNotion data={x.value} />
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

        </header>
        <main class="mt-10 prose max-w-max prose-img:rounded-lg">
            {body.map((bl) => <RenderNotion data={bl} />)}
        </main>
    </div>
</Layout>